---
import { categoryIcons } from '../data/categoryIcons';

interface Props {
  categories?: string[];
}

const { categories = [
  "AI 工具",
  "搜索工具",
  "下载工具",
  "视频平台",
  "SEO 工具",
  "设计资源",
  "前端资源"
]} = Astro.props;
---

<div class="w-full max-w-2xl mx-auto relative mb-12">
  <div class="relative">
    <!-- 搜索图标 -->
    <div class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none">
      <svg class="w-6 h-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
      </svg>
    </div>

    <!-- 搜索输入框 -->
    <input 
      type="text" 
      id="search-input" 
      class="w-full py-4 pl-12 pr-12 text-lg text-gray-700 bg-white border border-gray-200 rounded-full dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-md"
      placeholder="搜索工具名称、描述、分类或标签..."
      autocomplete="off"
    />

    <!-- 清除按钮 -->
    <button 
      id="clear-search" 
      class="absolute inset-y-0 right-0 flex items-center pr-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hidden"
      aria-label="清除搜索"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>
  
  <!-- 分类过滤器 -->
  <div class="flex flex-wrap gap-2 mt-4 justify-center">
    <button
      class="category-filter active px-3 py-1 rounded-full text-sm font-medium bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
      data-category="all"
    >
      <span class="mr-1">📦</span> 全部
    </button>
    {categories.map(category => (
      <button
        class="category-filter px-3 py-1 rounded-full text-sm font-medium bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
        data-category={category}
      >
        <span class="mr-1">{categoryIcons[category] || "📦"}</span> {category}
      </button>
    ))}
  </div>
</div>

<script>
  // 导入 Fuse.js
  import Fuse from 'fuse.js';
  
  let debounceTimer: number;
  let fuse: any = null;

  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const clearButton = document.getElementById('clear-search');
    const categoryFilters = document.querySelectorAll('.category-filter');
    const toolsContainer = document.getElementById('tools-container');
    const noResultsMessage = document.getElementById('no-results-message');
    let currentCategory = 'all';
    
    // 确保无结果消息在初始化时隐藏
    if (noResultsMessage) {
      noResultsMessage.classList.add('hidden');
      noResultsMessage.style.display = 'none';
    }
    
    // 防抖函数
    const debounce = (func: Function, delay: number) => {
      return (...args: any[]) => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func(...args), delay);
      };
    };

    // 获取所有工具卡片
    const toolCards = document.querySelectorAll('.tool-card-container');
    console.log('找到工具卡片数量:', toolCards.length);
    
    // 获取所有分类容器
    const categoryContainers = document.querySelectorAll('.category-container');
    console.log('找到分类容器数量:', categoryContainers.length);
    
    // 准备 Fuse.js 的数据
    const toolsData = Array.from(toolCards).map(card => {
      return {
        element: card,
        name: card.getAttribute('data-name') || '',
        description: card.getAttribute('data-description') || '',
        category: card.getAttribute('data-category') || '',
        tags: card.getAttribute('data-tags') || ''
      };
    });
    
    // 初始化 Fuse.js
    const fuseOptions = {
      includeScore: true,
      threshold: 0.3,
      keys: [
        'name',
        'description',
        'category',
        'tags'
      ]
    };
    
    fuse = new Fuse(toolsData, fuseOptions);
    
    const toggleClearButton = () => {
      if (searchInput.value) {
        clearButton?.classList.remove('hidden');
      } else {
        clearButton?.classList.add('hidden');
      }
    };

    const updateVisibility = (visibleCards: Set<HTMLElement>, searchTerm: string) => {
      const visibleCount = visibleCards.size;
      
      // 更新工具容器的可见性
      if (toolsContainer) {
        toolsContainer.style.display = visibleCount === 0 && searchTerm !== '' ? 'none' : 'block';
      }
      
      // 更新无结果消息的可见性
      if (noResultsMessage) {
        if (visibleCount === 0 && searchTerm !== '') {
          noResultsMessage.classList.remove('hidden');
          noResultsMessage.style.display = 'flex';
        } else {
          noResultsMessage.classList.add('hidden');
          noResultsMessage.style.display = 'none';
        }
      }
      
      // 处理所有工具卡片的显示/隐藏
      toolCards.forEach(card => {
        if (visibleCards.has(card as HTMLElement)) {
          (card as HTMLElement).style.display = 'block';
        } else {
          (card as HTMLElement).style.display = 'none';
        }
      });
      
      // 处理分类容器的显示/隐藏
      categoryContainers.forEach(container => {
        const cards = container.querySelectorAll('.tool-card-container');
        let hasVisibleCards = false;
        
        cards.forEach(card => {
          if ((card as HTMLElement).style.display === 'block') {
            hasVisibleCards = true;
          }
        });
        
        // 只有当分类下有可见卡片时才显示该分类容器
        (container as HTMLElement).style.display = hasVisibleCards ? 'block' : 'none';
      });
    };
    
    const performSearch = () => {
      const searchTerm = searchInput.value.trim().toLowerCase();
      const visibleCards = new Set<HTMLElement>();
      
      console.log('执行搜索，关键词:', searchTerm, '当前分类:', currentCategory);
      
      if (searchTerm === '') {
        // 如果搜索词为空，只根据分类筛选
        toolsData.forEach(item => {
          const matchesCategory = currentCategory === 'all' || 
            item.category.toLowerCase() === currentCategory.toLowerCase();
            
          if (matchesCategory) {
            visibleCards.add(item.element as HTMLElement);
          }
        });
      } else {
        // 使用 Fuse.js 进行搜索
        const results = fuse.search(searchTerm);
        console.log('Fuse.js 搜索结果:', results.length);
        
        // 过滤搜索结果，只保留匹配当前分类的结果
        results.forEach(result => {
          const item = result.item;
          const matchesCategory = currentCategory === 'all' || 
            item.category.toLowerCase() === currentCategory.toLowerCase();
            
          if (matchesCategory) {
            visibleCards.add(item.element as HTMLElement);
          }
        });
      }
      
      console.log('搜索结果: 找到', visibleCards.size, '个匹配项');
      
      updateVisibility(visibleCards, searchTerm);
    };
    
    const clearSearch = () => {
      searchInput.value = '';
      clearButton?.classList.add('hidden');
      performSearch();
      searchInput.focus(); // 清除后重新聚焦到搜索框
    };
    
    // 分类过滤器处理
    categoryFilters.forEach(filter => {
      filter.addEventListener('click', () => {
        categoryFilters.forEach(f => f.classList.remove('active'));
        filter.classList.add('active');
        currentCategory = filter.getAttribute('data-category') || 'all';
        performSearch();
      });
    });
    
    // 搜索框输入事件（带防抖）
    searchInput.addEventListener('input', debounce(() => {
      toggleClearButton();
      performSearch();
    }, 300));
    
    // 清除按钮点击事件
    clearButton?.addEventListener('click', clearSearch);
    
    // 按下 Esc 键清除搜索
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        clearSearch();
      }
    });
    
    // 监听窗口大小变化
    window.addEventListener('resize', debounce(() => {
      performSearch();
    }, 300));
    
    // 初始化
    toggleClearButton();
    performSearch();
  });
</script>

<style>
  .category-filter.active {
    @apply bg-blue-500 text-white hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700;
  }

  /* 搜索框动画效果 */
  #search-input {
    transition: all 0.2s ease-in-out;
  }

  #search-input:focus {
    transform: scale(1.01);
  }
</style>
